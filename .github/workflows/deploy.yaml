name: CI/CD Pipeline for Hello-World App (OIDC + IRSA + Pod Identity)

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: thrive-cluster-test
  ECR_REPOSITORY: hello-world
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    needs: test
    runs-on: ubuntu-latest
    environment: AWS_OIDC # GitHub Environment containing the AWS_ACCOUNT_ID secret
    permissions:
      id-token: write # Required for OIDC authentication
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/thrive-cluster-test-github-actions-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActionsTerraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Verify Backend Infrastructure
        run: |
          echo "üîç Verifying Terraform backend infrastructure..."
          aws s3api head-bucket --bucket "thrive-cluster-test-terraform-state" >/dev/null || \
            (echo "‚ùå S3 backend bucket not found! Please run the 'Provision AWS Backend' workflow first." && exit 1)
          echo "‚úÖ S3 backend bucket found."
          aws dynamodb describe-table --table-name "thrive-cluster-test-terraform-locks" --region ${{ env.AWS_REGION }} >/dev/null || \
            (echo "‚ùå DynamoDB lock table not found! Please run the 'Provision AWS Backend' workflow first." && exit 1)
          echo "‚úÖ DynamoDB lock table found."

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=thrive-cluster-test-terraform-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=thrive-cluster-test-terraform-locks"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          # No AWS credential variables are needed here.
          # Terraform automatically uses the temporary credentials from the OIDC role.
          terraform plan \
            -var="github_repo=${{ github.repository }}" \
            -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" \
            -lock-timeout=5m \
            -out=tfplan

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan