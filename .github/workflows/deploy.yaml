name: CI/CD Pipeline for Hello-World App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  SECRETS_MANAGER_SECRET_NAME: thrive-cluster-test-github-actions-credentials
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Run tests
        working-directory: ./app
        run: 'npm test || echo "No tests configured yet - TODO: add proper tests"'

      - name: Lint code
        working-directory: ./app
        run: 'npm run lint || echo "No linting configured yet - TODO: add ESLint"'

  build-and-push:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: AWS_ACCESS_KEY_ID
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR repository URI
        id: get-ecr
        run: |
          ECR_REPO=$(aws ecr describe-repositories --repository-names hello-world --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=thrive-cluster-test" >> $GITHUB_OUTPUT

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to ECR
        working-directory: ./app
        run: |
          docker build -t ${{ steps.get-ecr.outputs.ECR_REPO }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ steps.get-ecr.outputs.ECR_REPO }}:${{ env.IMAGE_TAG }} ${{ steps.get-ecr.outputs.ECR_REPO }}:latest
          docker push ${{ steps.get-ecr.outputs.ECR_REPO }}:${{ env.IMAGE_TAG }}
          docker push ${{ steps.get-ecr.outputs.ECR_REPO }}:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.get-ecr.outputs.ECR_REPO }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: AWS_ACCESS_KEY_ID
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set GitHub repo environment variable
        run: echo "GITHUB_REPO=${{ github.repository }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Import existing resources (if needed)
        run: |
          # Import ECR repository if it exists
          if aws ecr describe-repositories --repository-names hello-world --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            terraform import module.ecr.aws_ecr_repository.hello_world hello-world || echo "ECR repository already imported or doesn't exist"
          fi
          
          # Import EKS cluster if it exists
          if aws eks describe-cluster --name thrive-cluster-test --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            terraform import module.eks.aws_eks_cluster.this thrive-cluster-test || echo "EKS cluster already imported or doesn't exist"
          fi
          
          # Import EKS node group if it exists
          if aws eks describe-nodegroup --cluster-name thrive-cluster-test --nodegroup-name thrive-cluster-test-nodegroup --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            terraform import module.eks.aws_eks_node_group.this thrive-cluster-test:thrive-cluster-test-nodegroup || echo "EKS node group already imported or doesn't exist"
          fi
          
          # Import IAM roles if they exist
          if aws iam get-role --role-name thrive-cluster-test-cluster-role > /dev/null 2>&1; then
            terraform import module.iam.aws_iam_role.eks_cluster_role thrive-cluster-test-cluster-role || echo "EKS cluster role already imported or doesn't exist"
          fi
          
          if aws iam get-role --role-name thrive-cluster-test-node-role > /dev/null 2>&1; then
            terraform import module.iam.aws_iam_role.eks_node_role thrive-cluster-test-node-role || echo "EKS node role already imported or doesn't exist"
          fi
          
          if aws iam get-role --role-name hello-world-pod-role > /dev/null 2>&1; then
            terraform import module.iam.aws_iam_role.hello_world_pod hello-world-pod-role || echo "Pod role already imported or doesn't exist"
          fi
          
          # Import GitHub Actions role if it exists
          if aws iam get-role --role-name thrive-cluster-test-github-actions-role > /dev/null 2>&1; then
            terraform import module.github_actions.aws_iam_role.github_actions thrive-cluster-test-github-actions-role || echo "GitHub Actions role already imported or doesn't exist"
          fi
          
          # Import OIDC providers if they exist
          if aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?contains(Arn, `token.actions.githubusercontent.com`)]' --output text | grep -q "arn:"; then
            GITHUB_OIDC_ARN=$(aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?contains(Arn, `token.actions.githubusercontent.com`)].Arn' --output text)
            terraform import module.github_actions.aws_iam_openid_connect_provider.github "$GITHUB_OIDC_ARN" || echo "GitHub OIDC provider already imported or doesn't exist"
          fi
          
          if aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?contains(Arn, `oidc.eks.us-east-1.amazonaws.com`)]' --output text | grep -q "arn:"; then
            EKS_OIDC_ARN=$(aws iam list-open-id-connect-providers --query 'OpenIDConnectProviderList[?contains(Arn, `oidc.eks.us-east-1.amazonaws.com`)].Arn' --output text)
            terraform import module.eks.aws_iam_openid_connect_provider.eks "$EKS_OIDC_ARN" || echo "EKS OIDC provider already imported or doesn't exist"
            terraform import module.iam.aws_iam_openid_connect_provider.eks "$EKS_OIDC_ARN" || echo "EKS OIDC provider already imported or doesn't exist"
          fi
          
          # Import Secrets Manager secrets if they exist
          if aws secretsmanager describe-secret --secret-id thrive-cluster-test-github-actions-credentials --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            terraform import module.github_actions.aws_secretsmanager_secret.github_credentials thrive-cluster-test-github-actions-credentials || echo "GitHub credentials secret already imported or doesn't exist"
          fi
          
          if aws secretsmanager describe-secret --secret-id thrive-cluster-test-app-secrets --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            terraform import module.secrets.aws_secretsmanager_secret.app_secrets thrive-cluster-test-app-secrets || echo "App secrets already imported or doesn't exist"
          fi
          
          # Import CloudWatch log group if it exists
          if aws logs describe-log-groups --log-group-name-prefix "/aws/eks/thrive-cluster-test" --region ${{ env.AWS_REGION }} --query 'logGroups[0].logGroupName' --output text | grep -q "/aws/eks/thrive-cluster-test"; then
            LOG_GROUP_NAME=$(aws logs describe-log-groups --log-group-name-prefix "/aws/eks/thrive-cluster-test" --region ${{ env.AWS_REGION }} --query 'logGroups[0].logGroupName' --output text)
            terraform import module.monitoring.aws_cloudwatch_log_group.eks_cluster "$LOG_GROUP_NAME" || echo "CloudWatch log group already imported or doesn't exist"
          fi

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="github_repo=$GITHUB_REPO" \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -out=tfplan

      - name: Terraform Apply
        run: |
          terraform apply \
            -var="github_repo=$GITHUB_REPO" \
            -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -auto-approve

  deploy-application:
    needs: [build-and-push, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: AWS_ACCESS_KEY_ID
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR repository URI
        id: get-ecr
        run: |
          ECR_REPO=$(aws ecr describe-repositories --repository-names hello-world --query 'repositories[0].repositoryUri' --output text)
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=thrive-cluster-test" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ steps.get-ecr.outputs.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Update image tag in deployment
          sed -i "s|ACCOUNT_ID.dkr.ecr.REGION.amazonaws.com/hello-world:latest|${{ steps.get-ecr.outputs.ECR_REPO }}:${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml
          
          # Apply all Kubernetes manifests
          kubectl apply -f k8s/

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/hello-world --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -l app=hello-world
          kubectl get services
          kubectl get ingress

  notify:
    needs: [deploy-application]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-application.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
