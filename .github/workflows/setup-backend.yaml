name: Setup Terraform Backend

on:
  workflow_dispatch:
    inputs:
      confirm_setup:
        description: 'Type "yes" to confirm backend setup'
        required: true
        default: 'no'
      aws_region:
        description: 'AWS Region for backend resources'
        required: false
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1
          - us-west-2
          - eu-west-1
          - ap-southeast-1

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    environment: AWS_ACCESS_KEY_ID
    if: github.event.inputs.confirm_setup == 'yes'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials  
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/thrive-cluster-test-github-actions-role
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions

      - name: Verify AWS credentials
        run: |
          echo "🔍 Verifying AWS credentials..."
          aws sts get-caller-identity
          echo " AWS credentials verified"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Create S3 Bucket for Terraform State
        run: |
          echo " Creating S3 bucket for Terraform state..."
          
          BUCKET_NAME="thrive-cluster-test-terraform-state"
          
          # Check if bucket already exists
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo " S3 bucket '$BUCKET_NAME' already exists"
          else
            echo " Creating S3 bucket '$BUCKET_NAME'..."
            aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
            
            # Enable versioning
            aws s3api put-bucket-versioning --bucket $BUCKET_NAME --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption --bucket $BUCKET_NAME --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            
            # Block public access
            aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            
            # Add tags to the bucket
            aws s3api put-bucket-tagging --bucket $BUCKET_NAME --tagging 'TagSet=[{Key=Name,Value=Terraform State Bucket},{Key=Environment,Value=dev},{Key=Project,Value=Thrive_Cluster_Test},{Key=Purpose,Value=Terraform State Storage}]'
            
            echo " S3 bucket '$BUCKET_NAME' created successfully"
          fi

      - name: Create DynamoDB Table for State Locking
        run: |
          echo " Creating DynamoDB table for Terraform state locking..."
          echo " Using PAY_PER_REQUEST billing mode (Free Tier friendly)"
          
          TABLE_NAME="thrive-cluster-test-terraform-locks"
          
          # Check if table already exists
          if aws dynamodb describe-table --table-name $TABLE_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo " DynamoDB table '$TABLE_NAME' already exists"
          else
            echo " Creating DynamoDB table '$TABLE_NAME'..."
            echo " Free Tier includes: 25 GB storage + 25 read/write capacity units"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.AWS_REGION }}
            
            # Wait for table to be active
            echo "⏳ Waiting for table to become active..."
            aws dynamodb wait table-exists --table-name $TABLE_NAME --region ${{ env.AWS_REGION }}
            
            # Add tags to the table
            aws dynamodb tag-resource --resource-arn "arn:aws:dynamodb:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):table/$TABLE_NAME" --tags Key=Name,Value="Terraform State Locks",Key=Environment,Value=dev,Key=Project,Value=Thrive_Cluster_Test,Key=Purpose,Value="Terraform State Locking"
            
            echo " DynamoDB table '$TABLE_NAME' created successfully"
          fi

      - name: Create GitHub OIDC Provider
        run: |
          echo "🔧 Creating GitHub OIDC provider for secure authentication..."
          
          PROVIDER_URL="https://token.actions.githubusercontent.com"
          PROVIDER_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"
          
          # Check if OIDC provider already exists
          if aws iam get-open-id-connect-provider --open-id-connect-provider-arn $PROVIDER_ARN >/dev/null 2>&1; then
            echo " GitHub OIDC provider already exists"
          else
            echo " Creating GitHub OIDC provider..."
            
            # Create the OIDC provider
            aws iam create-open-id-connect-provider \
              --url $PROVIDER_URL \
              --client-id-list sts.amazonaws.com \
              --thumbprint-list 6938fd4d98bab03faadb97b34396831e3780aea1 \
              --tags Key=Name,Value="GitHub Actions OIDC" Key=Environment,Value=dev Key=Project,Value=Thrive_Cluster_Test Key=Purpose,Value="GitHub Actions Authentication"
            
            echo " GitHub OIDC provider created successfully"
            echo " Provider ARN: $PROVIDER_ARN"
          fi

      - name: Create GitHub Actions IAM Role
        run: |
          echo "🔧 Creating GitHub Actions IAM role for OIDC authentication..."
          
          ROLE_NAME="thrive-cluster-test-github-actions-role"
          PROVIDER_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"
          
          # Check if role already exists
          if aws iam get-role --role-name $ROLE_NAME >/dev/null 2>&1; then
            echo " GitHub Actions IAM role already exists"
          else
            echo "📦 Creating GitHub Actions IAM role..."
            
            # Create trust policy for OIDC
            cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "$PROVIDER_ARN"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
                  },
                  "StringLike": {
                    "token.actions.githubusercontent.com:sub": "repo:${{ github.repository }}:*"
                  }
                }
              }
            ]
          }
          EOF
            
            # Create the role
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://trust-policy.json --tags Key=Name,Value="GitHub Actions Role" Key=Environment,Value=dev Key=Project,Value=Thrive_Cluster_Test Key=Purpose,Value="GitHub Actions OIDC Authentication"
            
            # Create and attach policy for GitHub Actions
            cat > github-actions-policy.json << 'EOF'
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ecr:GetAuthorizationToken",
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:BatchGetImage",
                  "ecr:PutImage",
                  "ecr:InitiateLayerUpload",
                  "ecr:UploadLayerPart",
                  "ecr:CompleteLayerUpload",
                  "eks:DescribeCluster",
                  "eks:ListClusters",
                  "eks:UpdateClusterConfig",
                  "eks:CreateCluster",
                  "eks:DeleteCluster",
                  "eks:TagResource",
                  "eks:UntagResource",
                  "eks:ListTagsForResource",
                  "eks:CreateNodegroup",
                  "eks:DeleteNodegroup",
                  "eks:DescribeNodegroup",
                  "eks:ListNodegroups",
                  "eks:UpdateNodegroupConfig",
                  "eks:UpdateNodegroupVersion",
                  "iam:CreateRole",
                  "iam:DeleteRole",
                  "iam:GetRole",
                  "iam:PassRole",
                  "iam:AttachRolePolicy",
                  "iam:DetachRolePolicy",
                  "iam:ListAttachedRolePolicies",
                  "iam:CreatePolicy",
                  "iam:DeletePolicy",
                  "iam:GetPolicy",
                  "iam:GetPolicyVersion",
                  "iam:ListPolicyVersions",
                  "iam:CreatePolicyVersion",
                  "iam:DeletePolicyVersion",
                  "iam:TagRole",
                  "iam:UntagRole",
                  "iam:ListRoleTags",
                  "iam:TagPolicy",
                  "iam:UntagPolicy",
                  "iam:ListPolicyTags",
                  "s3:*",
                  "dynamodb:*",
                  "secretsmanager:*",
                  "kms:*",
                  "ec2:*",
                  "vpc:*",
                  "cloudwatch:*",
                  "logs:*",
                  "acm:*",
                  "route53:*",
                  "sts:GetCallerIdentity"
                ],
                "Resource": "*"
              }
            ]
          }
          EOF
            
            # Create the policy
            aws iam create-policy --policy-name "thrive-cluster-test-github-actions-policy" --policy-document file://github-actions-policy.json --description "Policy for GitHub Actions to access AWS resources"
            
            # Attach policy to role
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn "arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):policy/thrive-cluster-test-github-actions-policy"
            
            # Clean up temporary files
            rm -f trust-policy.json github-actions-policy.json
            
            echo " GitHub Actions IAM role created successfully"
            echo " Role ARN: arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/$ROLE_NAME"
          fi

      - name: Verify Backend Setup
        run: |
          echo "🔍 Verifying backend setup..."
          
          # Check S3 bucket
          if aws s3api head-bucket --bucket "thrive-cluster-test-terraform-state" 2>/dev/null; then
            echo " S3 bucket is accessible"
          else
            echo " S3 bucket is not accessible"
            exit 1
          fi
          
          # Check DynamoDB table
          if aws dynamodb describe-table --table-name "thrive-cluster-test-terraform-locks" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo " DynamoDB table is accessible"
          else
            echo " DynamoDB table is not accessible"
            exit 1
          fi
          
          # Check OIDC provider
          PROVIDER_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"
          if aws iam get-open-id-connect-provider --open-id-connect-provider-arn $PROVIDER_ARN >/dev/null 2>&1; then
            echo " GitHub OIDC provider is accessible"
          else
            echo " GitHub OIDC provider is not accessible"
            exit 1
          fi
          
          # Check IAM role
          if aws iam get-role --role-name "thrive-cluster-test-github-actions-role" >/dev/null 2>&1; then
            echo " GitHub Actions IAM role is accessible"
          else
            echo " GitHub Actions IAM role is not accessible"
            exit 1
          fi
          
          echo ""
          echo " Backend setup completed successfully!"
          echo "=========================================="
          echo " S3 bucket: thrive-cluster-test-terraform-state"
          echo " DynamoDB table: thrive-cluster-test-terraform-locks"
          echo " GitHub OIDC provider: token.actions.githubusercontent.com"
          echo " GitHub Actions IAM role: thrive-cluster-test-github-actions-role"
          echo " Region: ${{ env.AWS_REGION }}"
          echo ""
          echo " Next steps:"
          echo "   1. Run the main deployment workflow (deploy.yaml)"
          echo "   2. Terraform will now use the S3 backend automatically"
          echo "   3. State will be automatically saved and locked"
          echo "   4. You can now safely run terraform commands locally"
          echo "   5. GitHub Actions can use OIDC for secure authentication"
          echo ""
          echo " Security features enabled:"
          echo "   - State file encryption in S3"
          echo "   - State locking with DynamoDB"
          echo "   - Public access blocked on S3 bucket"
          echo "   - Versioning enabled on S3 bucket"
          echo "   - GitHub OIDC provider for secure CI/CD authentication"
          echo ""
          echo " Cost optimization:"
          echo "   - DynamoDB uses PAY_PER_REQUEST billing"
          echo "   - Stays within AWS Free Tier limits"
          echo "   - Typical cost: < $1/month for state locking"
          echo "   - OIDC provider is free to use"
