name: Setup Terraform Backend

on:
  workflow_dispatch:
    inputs:
      confirm_setup:
        description: 'Type "yes" to confirm backend setup'
        required: true
        default: 'no'
      aws_region:
        description: 'AWS Region for backend resources'
        required: false
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1
          - us-west-2
          - eu-west-1
          - ap-southeast-1

env:
  AWS_REGION: ${{ github.event.inputs.aws_region || 'us-east-1' }}

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    environment: AWS_ACCESS_KEY_ID
    if: github.event.inputs.confirm_setup == 'yes'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "üîç Verifying AWS credentials..."
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials verified"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Create S3 Bucket for Terraform State
        run: |
          echo "üîß Creating S3 bucket for Terraform state..."
          
          BUCKET_NAME="thrive-cluster-test-terraform-state"
          
          # Check if bucket already exists
          if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
            echo "‚úÖ S3 bucket '$BUCKET_NAME' already exists"
          else
            echo "üì¶ Creating S3 bucket '$BUCKET_NAME'..."
            aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
            
            # Enable versioning
            aws s3api put-bucket-versioning --bucket $BUCKET_NAME --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption --bucket $BUCKET_NAME --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
            
            # Block public access
            aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            
            # Add tags to the bucket
            aws s3api put-bucket-tagging --bucket $BUCKET_NAME --tagging 'TagSet=[{Key=Name,Value=Terraform State Bucket},{Key=Environment,Value=dev},{Key=Project,Value=Thrive_Cluster_Test},{Key=Purpose,Value=Terraform State Storage}]'
            
            echo "‚úÖ S3 bucket '$BUCKET_NAME' created successfully"
          fi

      - name: Create DynamoDB Table for State Locking
        run: |
          echo "üîß Creating DynamoDB table for Terraform state locking..."
          echo "üí∞ Using PAY_PER_REQUEST billing mode (Free Tier friendly)"
          
          TABLE_NAME="thrive-cluster-test-terraform-locks"
          
          # Check if table already exists
          if aws dynamodb describe-table --table-name $TABLE_NAME --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ DynamoDB table '$TABLE_NAME' already exists"
          else
            echo "üì¶ Creating DynamoDB table '$TABLE_NAME'..."
            echo "üí° Free Tier includes: 25 GB storage + 25 read/write capacity units"
            aws dynamodb create-table \
              --table-name $TABLE_NAME \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region ${{ env.AWS_REGION }}
            
            # Wait for table to be active
            echo "‚è≥ Waiting for table to become active..."
            aws dynamodb wait table-exists --table-name $TABLE_NAME --region ${{ env.AWS_REGION }}
            
            # Add tags to the table
            aws dynamodb tag-resource --resource-arn "arn:aws:dynamodb:${{ env.AWS_REGION }}:$(aws sts get-caller-identity --query Account --output text):table/$TABLE_NAME" --tags "Key=Name Value=Terraform State Locks Key=Environment,Value=dev Key=Project,Value=Thrive_Cluster_Test Key=Purpose,Value=Terraform State Locking"
            
            echo "‚úÖ DynamoDB table '$TABLE_NAME' created successfully"
          fi

      - name: Create GitHub OIDC Provider
        run: |
          echo "üîß Creating GitHub OIDC provider for secure authentication..."
          
          PROVIDER_URL="https://token.actions.githubusercontent.com"
          PROVIDER_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"
          
          # Check if OIDC provider already exists
          if aws iam get-open-id-connect-provider --open-id-connect-provider-arn $PROVIDER_ARN >/dev/null 2>&1; then
            echo "‚úÖ GitHub OIDC provider already exists"
          else
            echo "üì¶ Creating GitHub OIDC provider..."
            
            # Create the OIDC provider
            aws iam create-open-id-connect-provider \
              --url $PROVIDER_URL \
              --client-id-list sts.amazonaws.com \
              --thumbprint-list 6938fd4d98bab03faadb97b34396831e3780aea1 \
              --tags Key=Name,Value=GitHub Actions OIDC Key=Environment,Value=dev Key=Project,Value=Thrive_Cluster_Test Key=Purpose,Value=GitHub Actions Authentication
            
            echo "‚úÖ GitHub OIDC provider created successfully"
            echo "üîó Provider ARN: $PROVIDER_ARN"
          fi

      - name: Verify Backend Setup
        run: |
          echo "üîç Verifying backend setup..."
          
          # Check S3 bucket
          if aws s3api head-bucket --bucket "thrive-cluster-test-terraform-state" 2>/dev/null; then
            echo "‚úÖ S3 bucket is accessible"
          else
            echo "‚ùå S3 bucket is not accessible"
            exit 1
          fi
          
          # Check DynamoDB table
          if aws dynamodb describe-table --table-name "thrive-cluster-test-terraform-locks" --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "‚úÖ DynamoDB table is accessible"
          else
            echo "‚ùå DynamoDB table is not accessible"
            exit 1
          fi
          
          # Check OIDC provider
          PROVIDER_ARN="arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):oidc-provider/token.actions.githubusercontent.com"
          if aws iam get-open-id-connect-provider --open-id-connect-provider-arn $PROVIDER_ARN >/dev/null 2>&1; then
            echo "‚úÖ GitHub OIDC provider is accessible"
          else
            echo "‚ùå GitHub OIDC provider is not accessible"
            exit 1
          fi
          
          echo ""
          echo "üéâ Backend setup completed successfully!"
          echo "=========================================="
          echo "‚úÖ S3 bucket: thrive-cluster-test-terraform-state"
          echo "‚úÖ DynamoDB table: thrive-cluster-test-terraform-locks"
          echo "‚úÖ GitHub OIDC provider: token.actions.githubusercontent.com"
          echo "‚úÖ Region: ${{ env.AWS_REGION }}"
          echo ""
          echo "üí° Next steps:"
          echo "   1. Run the main deployment workflow (deploy.yaml)"
          echo "   2. Terraform will now use the S3 backend automatically"
          echo "   3. State will be automatically saved and locked"
          echo "   4. You can now safely run terraform commands locally"
          echo "   5. GitHub Actions can use OIDC for secure authentication"
          echo ""
          echo "üîí Security features enabled:"
          echo "   - State file encryption in S3"
          echo "   - State locking with DynamoDB"
          echo "   - Public access blocked on S3 bucket"
          echo "   - Versioning enabled on S3 bucket"
          echo "   - GitHub OIDC provider for secure CI/CD authentication"
          echo ""
          echo "üí∞ Cost optimization:"
          echo "   - DynamoDB uses PAY_PER_REQUEST billing"
          echo "   - Stays within AWS Free Tier limits"
          echo "   - Typical cost: < $1/month for state locking"
          echo "   - OIDC provider is free to use"
